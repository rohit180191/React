{"version":3,"sources":["components/UI/Spinner/Spinner.js","components/UI/Spinner/Spinner.module.css","components/UI/Input/Input.js","components/UI/Input/Input.module.css","containers/Checkout/ContactData/ContactData.module.css","containers/Checkout/ContactData/ContactData.js"],"names":["Spinner","className","classes","module","exports","Input","props","inputElement","validationError","inputElementClass","InputElement","invalid","shouldValidate","touched","push","Invalid","style","margin","color","textAlign","elementType","elementConfig","join","value","onChange","changed","options","map","option","key","displayValue","Label","label","ContactData","state","orderForm","name","type","placeholder","validation","required","valid","street","country","zipCode","email","deliveryMethod","loading","formIsValid","orderHandler","event","preventDefault","setState","formData","formIdentifier","order","ingredients","burger","price","totalPrice","orderData","axios","post","token","then","response","history","replace","catch","error","inputElementChangeHandler","elementId","target","updatedForm","updatedFormElement","checkValidity","elementIdentifier","rule","isValid","trim","formElementsArray","this","id","config","form","onSubmit","formElement","btnType","disabled","Component","connect","burgerBuilder","auth"],"mappings":"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","file":"static/js/6.62a253a2.chunk.js","sourcesContent":["import React from 'react';\r\nimport classes from './Spinner.module.css'\r\n\r\nconst Spinner = () => (\r\n    <div className={classes.Spinner}>Loading...</div>\r\n);\r\n\r\nexport default Spinner;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Spinner\":\"Spinner_Spinner__EEHbp\",\"load3\":\"Spinner_load3__pkDYN\"};","import React from 'react';\r\nimport classes from './Input.module.css';\r\nconst Input = (props) => {\r\n    let inputElement = null;\r\n    let validationError = null;\r\n    const inputElementClass = [classes.InputElement];\r\n    if(props.invalid && props.shouldValidate && props.touched){\r\n        inputElementClass.push(classes.Invalid);\r\n        validationError = <p style={{margin: '0', color: 'red', textAlign: 'left'}}>Please enter valid value!</p>;\r\n    }\r\n    switch(props.elementType){\r\n        case ('input'):\r\n            inputElement = <input {...props.elementConfig} className={inputElementClass.join(' ')} value={props.value} onChange={props.changed}/>;\r\n            break;\r\n        case ('textarea'):\r\n            inputElement = <textarea {...props.elementConfig}  className={inputElementClass.join(' ')}value={props.value}  onChange={props.changed}/>;\r\n            break;\r\n        case ('select'):\r\n            inputElement = (<select className={inputElementClass.join(' ')} value={props.value} onChange={props.changed}>\r\n                {props.elementConfig.options.map(option =>\r\n                (<option key={option.value} value={option.value}>{option.displayValue}</option>))}\r\n            </select>);\r\n            break;\r\n        default:\r\n    }\r\nreturn (\r\n    <div className={classes.Input}>\r\n        <label className ={classes.Label}>{props.label}</label>\r\n        {inputElement}\r\n        {validationError}\r\n    </div>\r\n);\r\n}\r\n\r\nexport default Input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__2r9JM\",\"Label\":\"Input_Label__37pAB\",\"InputElement\":\"Input_InputElement__1Jed1\",\"Invalid\":\"Input_Invalid__2pAmY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__3IgmF\"};","import React, { Component } from 'react';\r\nimport Button from './../../../components/UI/Button/Button';\r\nimport classes from './ContactData.module.css';\r\nimport axios from './../../../axios-orders';\r\nimport Spinner from './../../../components/UI/Spinner/Spinner';\r\nimport Input from './../../../components/UI/Input/Input'\r\nimport {connect} from 'react-redux';\r\nclass ContactData extends Component{\r\n\r\n    state ={\r\n        orderForm :{\r\n            name:{\r\n                elementType:'input',\r\n                elementConfig:{\r\n                    type:'text',\r\n                    placeholder:'Your Name'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            street:{\r\n                elementType:'input',\r\n                elementConfig:{\r\n                    type:'text',\r\n                    placeholder:'Street'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            country:{\r\n                elementType:'input',\r\n                elementConfig:{\r\n                    type:'text',\r\n                    placeholder:'Country'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            zipCode:{\r\n                elementType:'input',\r\n                elementConfig:{\r\n                    type:'text',\r\n                    placeholder:'Zip Code'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            email:{\r\n                elementType:'input',\r\n                elementConfig:{\r\n                    type:'email',\r\n                    placeholder:'Mail'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            deliveryMethod:{\r\n                elementType:'select',\r\n                elementConfig:{\r\n                    options:[\r\n                        {value: 'fastest', displayValue: 'Fastest'},\r\n                        {value: 'cheapest', displayValue: 'Cheapest'}\r\n                    ]\r\n                },\r\n                validation: {},\r\n                value: 'fastest',\r\n                valid: true\r\n            }\r\n        },\r\n        loading: false,\r\n        formIsValid: false\r\n    }\r\n    orderHandler = (event) => {\r\n        event.preventDefault();\r\n       this.setState({loading: true});\r\n       const formData = {};\r\n       for(let formIdentifier in this.state.orderForm){\r\n           formData[formIdentifier] = this.state.orderForm[formIdentifier].value;\r\n       }\r\n       const order = {\r\n           ingredients : this.props.burger.ingredients,\r\n           price: this.props.burger.totalPrice,\r\n           orderData: formData\r\n       }\r\n\r\n       axios.post(`/orders.json?auth=${this.props.token}`, order)\r\n       .then(response => { this.setState({loading: false}); this.props.history.replace('/', null) })\r\n       .catch(error => {this.setState({loading: false}) });\r\n    }\r\n\r\n    inputElementChangeHandler = (event, elementId) => {\r\n        const value = event.target.value;\r\n        const updatedForm = {...this.state.orderForm};\r\n        const updatedFormElement = {...updatedForm[elementId]};\r\n        updatedFormElement.value = value;\r\n        updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\r\n        updatedFormElement.touched = true;\r\n        updatedForm[elementId] = updatedFormElement;\r\n        let formIsValid = true;\r\n        for(let elementIdentifier in updatedForm){\r\n            formIsValid = updatedForm[elementIdentifier].valid && formIsValid;\r\n        }\r\n       \r\n        this.setState({orderForm: updatedForm, formIsValid: formIsValid});\r\n    }\r\n\r\n    checkValidity(value, rule) {\r\n        let isValid = true;\r\n        if(!rule) {\r\n            return true;\r\n        }\r\n            if(rule.required) {\r\n                isValid = value.trim() !=='' && isValid;\r\n            } \r\n\r\n        return isValid;\r\n\r\n    }\r\n    render() {\r\n        const formElementsArray = [];\r\n        for(let key in this.state.orderForm){\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.orderForm[key]\r\n            });\r\n        }\r\n        let form = (\r\n       \r\n            <form onSubmit ={this.orderHandler}>\r\n               {formElementsArray.map(formElement => \r\n                <Input key={formElement.id} elementType={formElement.config.elementType} elementConfig={formElement.config.elementConfig} value={formElement.config.value} changed={(event) => this.inputElementChangeHandler(event, formElement.id)} invalid={!formElement.config.valid} shouldValidate={formElement.config.validation} touched={formElement.config.touched}/>\r\n                )}\r\n                <Button btnType='Success' disabled={!this.state.formIsValid}>ORDER</Button>\r\n            </form>\r\n       \r\n        );\r\n        if(this.state.loading) {\r\n            form = <Spinner/>;\r\n        }\r\n        return (\r\n            <div className={classes.ContactData}>\r\n                <h4>Enter Your Contact Details</h4>\r\n                {form}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = state => {\r\n    return  {\r\n        burger:  state.burgerBuilder,\r\n        token: state.auth.token\r\n    }\r\n}\r\nexport default connect(mapStateToProps)(ContactData);"],"sourceRoot":""}