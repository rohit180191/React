{"version":3,"sources":["components/UI/Spinner/Spinner.js","components/UI/Spinner/Spinner.module.css","components/UI/Button/Button.js","components/UI/Button/Button.module.css","components/UI/Input/Input.js","components/UI/Input/Input.module.css","containers/Auth/Auth.module.css","containers/Auth/Auth.js"],"names":["Spinner","className","classes","module","exports","Button","props","onClick","clicked","disabled","btnType","join","children","Input","inputElement","validationError","inputElementClass","InputElement","invalid","shouldValidate","touched","push","Invalid","style","margin","color","textAlign","elementType","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Label","label","Auth","state","controls","email","type","placeholder","validation","required","isEmail","valid","password","minLength","formIsValid","isSignUp","inputElementChangeHandler","event","elementId","target","updatedForm","updatedFormElement","checkValidity","elementIdentifier","setState","AuthHandler","preventDefault","onAuth","switchAuthMode","prevState","rule","isValid","trim","length","test","this","isBurgerBuilding","setRedirectPath","formElementsArray","id","config","form","formElement","loading","errorMessage","error","message","authRedirect","isAuthenticated","to","authRedirectPath","onSubmit","Component","connect","auth","token","burgerBuilder","isBuilding","dispatch","actions"],"mappings":"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","file":"static/js/4.829645c4.chunk.js","sourcesContent":["import React from 'react';\r\nimport classes from './Spinner.module.css'\r\n\r\nconst Spinner = () => (\r\n    <div className={classes.Spinner}>Loading...</div>\r\n);\r\n\r\nexport default Spinner;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Spinner\":\"Spinner_Spinner__EEHbp\",\"load3\":\"Spinner_load3__pkDYN\"};","import React from 'react';\r\nimport classes from './Button.module.css';\r\n\r\nconst Button = (props) => (\r\n    <button onClick = {props.clicked} disabled={props.disabled}\r\n    className = {[classes.Button, classes[props.btnType]].join(' ')}\r\n    >\r\n        {props.children}\r\n    </button>\r\n)\r\n\r\nexport default Button;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__1Ixrv\",\"Success\":\"Button_Success__1eTrg\",\"Danger\":\"Button_Danger__9aUmQ\"};","import React from 'react';\r\nimport classes from './Input.module.css';\r\nconst Input = (props) => {\r\n    let inputElement = null;\r\n    let validationError = null;\r\n    const inputElementClass = [classes.InputElement];\r\n    if(props.invalid && props.shouldValidate && props.touched){\r\n        inputElementClass.push(classes.Invalid);\r\n        validationError = <p style={{margin: '0', color: 'red', textAlign: 'left'}}>Please enter valid value!</p>;\r\n    }\r\n    switch(props.elementType){\r\n        case ('input'):\r\n            inputElement = <input {...props.elementConfig} className={inputElementClass.join(' ')} value={props.value} onChange={props.changed}/>;\r\n            break;\r\n        case ('textarea'):\r\n            inputElement = <textarea {...props.elementConfig}  className={inputElementClass.join(' ')}value={props.value}  onChange={props.changed}/>;\r\n            break;\r\n        case ('select'):\r\n            inputElement = (<select className={inputElementClass.join(' ')} value={props.value} onChange={props.changed}>\r\n                {props.elementConfig.options.map(option =>\r\n                (<option key={option.value} value={option.value}>{option.displayValue}</option>))}\r\n            </select>);\r\n            break;\r\n        default:\r\n    }\r\nreturn (\r\n    <div className={classes.Input}>\r\n        <label className ={classes.Label}>{props.label}</label>\r\n        {inputElement}\r\n        {validationError}\r\n    </div>\r\n);\r\n}\r\n\r\nexport default Input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__2r9JM\",\"Label\":\"Input_Label__37pAB\",\"InputElement\":\"Input_InputElement__1Jed1\",\"Invalid\":\"Input_Invalid__2pAmY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__3UN41\"};","import React , {Component} from 'react';\r\nimport Input from './../../components/UI/Input/Input';\r\nimport Button from './../../components/UI/Button/Button';\r\nimport Spinner from './../../components/UI/Spinner/Spinner';\r\nimport classes from './Auth.module.css';\r\nimport * as actions from './../../store/actions';\r\nimport {connect} from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nclass Auth extends Component {\r\n    state = {\r\n        controls: {\r\n            email:{\r\n                elementType:'input',\r\n                elementConfig:{\r\n                    type:'email',\r\n                    placeholder:'Mail Address'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            password:{\r\n                elementType:'input',\r\n                elementConfig:{\r\n                    type:'password',\r\n                    placeholder:'Password'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            }\r\n        },\r\n        formIsValid: false,\r\n        isSignUp: true\r\n    }\r\n    inputElementChangeHandler = (event, elementId) => {\r\n        const value = event.target.value;\r\n        const updatedForm = {...this.state.controls};\r\n        const updatedFormElement = {...updatedForm[elementId]};\r\n        updatedFormElement.value = value;\r\n        updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\r\n        updatedFormElement.touched = true;\r\n        updatedForm[elementId] = updatedFormElement;\r\n        let formIsValid = true;\r\n        for(let elementIdentifier in updatedForm){\r\n            formIsValid = updatedForm[elementIdentifier].valid && formIsValid;\r\n        }\r\n       \r\n        this.setState({controls: updatedForm, formIsValid: formIsValid});\r\n    }\r\n    checkValidity(value, rule) {\r\n        let isValid = true;\r\n        if(!rule) {\r\n            return true;\r\n        }\r\n            if(rule.required) {\r\n                isValid = value.trim() !=='' && isValid;\r\n            } \r\n            if(rule.minLength){\r\n                isValid = value.length >= rule.minLength && isValid;\r\n            }\r\n            if(rule.isEmail){\r\n                const pattern = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n                isValid = pattern.test(value) && isValid;\r\n            }\r\n\r\n        return isValid;\r\n\r\n    }\r\n\r\n    AuthHandler = (event) => {\r\n        event.preventDefault();\r\n        const email = this.state.controls.email.value;\r\n        const password = this.state.controls.password.value;\r\n        const isSignUp = this.state.isSignUp;\r\n        this.props.onAuth(email, password, isSignUp);\r\n       \r\n    }\r\n    switchAuthMode = () => {\r\n        this.setState(prevState => {\r\n            return {isSignUp: !prevState.isSignUp}\r\n        });\r\n    }\r\n    componentDidMount() {\r\n        if(!this.props.isBurgerBuilding){\r\n            this.props.setRedirectPath();\r\n        }\r\n    }\r\n    render() {\r\n        const formElementsArray = [];\r\n        for(let key in this.state.controls){\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.controls[key]\r\n            });\r\n        }\r\n        let form = formElementsArray.map(formElement => \r\n            <Input key={formElement.id} elementType={formElement.config.elementType} elementConfig={formElement.config.elementConfig} value={formElement.config.value} changed={(event) => this.inputElementChangeHandler(event, formElement.id)} invalid={!formElement.config.valid} shouldValidate={formElement.config.validation} touched={formElement.config.touched}/>\r\n            );\r\n        if(this.props.loading){\r\n            form = <Spinner/>;\r\n        }    \r\n        let errorMessage = null;\r\n        if(this.props.error) {\r\n            errorMessage = (\r\n            <p>{this.props.error.message}</p>\r\n            )\r\n        }\r\n        let authRedirect= null;\r\n        if(this.props.isAuthenticated) {\r\n            authRedirect = <Redirect to={this.props.authRedirectPath}/>\r\n        }\r\n        return (\r\n            <div className={classes.Auth}>\r\n                  {errorMessage}\r\n                  {authRedirect}\r\n                <form onSubmit ={this.AuthHandler}>\r\n                    {form}\r\n                    <Button btnType='Success'  disabled={!this.state.formIsValid}>Submit</Button>\r\n                </form>\r\n                <Button btnType='Danger' clicked={this.switchAuthMode} >Switch to {this.state.isSignUp ? 'Sign in' : 'Sign Up'}</Button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: (email,password, isSignUp) => dispatch(actions.auth(email, password, isSignUp)),\r\n        setRedirectPath: () => dispatch(actions.setAuthRedirectPath('/')) \r\n    }\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading: state.auth.loading,\r\n        error: state.auth.error,\r\n        isAuthenticated: state.auth.token !== null,\r\n        isBurgerBuilding: state.burgerBuilder.isBuilding,\r\n        authRedirectPath: state.auth.authRedirectPath\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);"],"sourceRoot":""}